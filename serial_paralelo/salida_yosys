
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3565 (git sha1 474cd02e, gcc 9.3.0-10ubuntu2 -fPIC -Os)


-- Executing script file `script_demux.ys' --

1. Executing Verilog-2005 frontend: Serial_Paralelo.v
Parsing Verilog input from `Serial_Paralelo.v' to AST representation.
Generating RTLIL representation for module `\Serial_Paralelo'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \Serial_Paralelo

2.2. Analyzing design hierarchy..
Top module:  \Serial_Paralelo
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 4 switch rules as full_case in process $proc$Serial_Paralelo.v:40$5 in module Serial_Paralelo.
Marked 1 switch rules as full_case in process $proc$Serial_Paralelo.v:21$3 in module Serial_Paralelo.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 1 assignment to connection.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\Serial_Paralelo.$proc$Serial_Paralelo.v:40$5'.
     1/5: $0\counter_out[3:0]
     2/5: $0\contador_BC[2:0]
     3/5: $0\active[0:0]
     4/5: $0\valid_out[0:0]
     5/5: $0\data_out[7:0]
Creating decoders for process `\Serial_Paralelo.$proc$Serial_Paralelo.v:21$3'.
     1/8: $0\buffer[7:0] [7]
     2/8: $0\buffer[7:0] [5]
     3/8: $0\buffer[7:0] [4]
     4/8: $0\buffer[7:0] [3]
     5/8: $0\buffer[7:0] [2]
     6/8: $0\buffer[7:0] [1]
     7/8: $0\buffer[7:0] [0]
     8/8: $0\buffer[7:0] [6]
Creating decoders for process `\Serial_Paralelo.$proc$Serial_Paralelo.v:17$1'.

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\Serial_Paralelo.\not_clk_32f' from process `\Serial_Paralelo.$proc$Serial_Paralelo.v:17$1'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\Serial_Paralelo.\data_out' using process `\Serial_Paralelo.$proc$Serial_Paralelo.v:40$5'.
  created $dff cell `$procdff$92' with positive edge clock.
Creating register for signal `\Serial_Paralelo.\valid_out' using process `\Serial_Paralelo.$proc$Serial_Paralelo.v:40$5'.
  created $dff cell `$procdff$93' with positive edge clock.
Creating register for signal `\Serial_Paralelo.\active' using process `\Serial_Paralelo.$proc$Serial_Paralelo.v:40$5'.
  created $dff cell `$procdff$94' with positive edge clock.
Creating register for signal `\Serial_Paralelo.\contador_BC' using process `\Serial_Paralelo.$proc$Serial_Paralelo.v:40$5'.
  created $dff cell `$procdff$95' with positive edge clock.
Creating register for signal `\Serial_Paralelo.\counter_out' using process `\Serial_Paralelo.$proc$Serial_Paralelo.v:40$5'.
  created $dff cell `$procdff$96' with positive edge clock.
Creating register for signal `\Serial_Paralelo.\buffer' using process `\Serial_Paralelo.$proc$Serial_Paralelo.v:21$3'.
  created $dff cell `$procdff$97' with positive edge clock.

3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 6 empty switches in `\Serial_Paralelo.$proc$Serial_Paralelo.v:40$5'.
Removing empty process `Serial_Paralelo.$proc$Serial_Paralelo.v:40$5'.
Found and cleaned up 1 empty switch in `\Serial_Paralelo.$proc$Serial_Paralelo.v:21$3'.
Removing empty process `Serial_Paralelo.$proc$Serial_Paralelo.v:21$3'.
Removing empty process `Serial_Paralelo.$proc$Serial_Paralelo.v:17$1'.
Cleaned up 7 empty switches.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Serial_Paralelo.
<suppressed ~4 debug messages>

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Serial_Paralelo'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Serial_Paralelo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $procmux$38: \active -> 1'1
      Replacing known input bits on port A of cell $procmux$35: \active -> 1'0
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Serial_Paralelo.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Serial_Paralelo'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$97 ($dff) from module Serial_Paralelo (D = { \buffer [6:0] \data_in }, Q = \buffer, rval = 8'00000000).
Adding SRST signal on $procdff$96 ($dff) from module Serial_Paralelo (D = $procmux$16_Y [0], Q = \counter_out [0], rval = 1'0).
Adding SRST signal on $procdff$96 ($dff) from module Serial_Paralelo (D = $add$Serial_Paralelo.v:70$13_Y [3:1], Q = \counter_out [3:1], rval = 3'000).
Adding SRST signal on $procdff$95 ($dff) from module Serial_Paralelo (D = $procmux$29_Y, Q = \contador_BC, rval = 3'000).
Adding EN signal on $auto$opt_dff.cc:702:run$105 ($sdff) from module Serial_Paralelo (D = $procmux$27_Y, Q = \contador_BC).
Adding SRST signal on $procdff$94 ($dff) from module Serial_Paralelo (D = $procmux$40_Y, Q = \active, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$111 ($sdff) from module Serial_Paralelo (D = $procmux$38_Y, Q = \active).
Adding SRST signal on $procdff$92 ($dff) from module Serial_Paralelo (D = $procmux$64_Y, Q = \data_out, rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$113 ($sdff) from module Serial_Paralelo (D = $procmux$60_Y, Q = \data_out).
Adding SRST signal on $procdff$93 ($dff) from module Serial_Paralelo (D = $procmux$52_Y, Q = \valid_out, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$117 ($sdff) from module Serial_Paralelo (D = $procmux$48_Y, Q = \valid_out).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Serial_Paralelo..
Removed 20 unused cells and 59 unused wires.
<suppressed ~22 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Serial_Paralelo.
<suppressed ~1 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Serial_Paralelo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Serial_Paralelo.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Serial_Paralelo'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Serial_Paralelo..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Serial_Paralelo.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Serial_Paralelo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Serial_Paralelo.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Serial_Paralelo'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Serial_Paralelo..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module Serial_Paralelo.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Executing FSM pass (extract and optimize FSM).

5.1. Executing FSM_DETECT pass (finding FSMs in design).

5.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Serial_Paralelo..

5.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Serial_Paralelo.

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Serial_Paralelo'.
Removed a total of 0 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Serial_Paralelo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Serial_Paralelo.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Serial_Paralelo'.
Removed a total of 0 cells.

6.6. Executing OPT_DFF pass (perform DFF optimizations).

6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Serial_Paralelo..

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Serial_Paralelo.

6.9. Finished OPT passes. (There is nothing left to do.)

7. Executing MEMORY pass.

7.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

7.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

7.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Serial_Paralelo..

7.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

7.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Serial_Paralelo..

7.6. Executing MEMORY_COLLECT pass (generating $mem cells).

7.7. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Serial_Paralelo.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Serial_Paralelo'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Serial_Paralelo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Serial_Paralelo.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Serial_Paralelo'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Serial_Paralelo..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Serial_Paralelo.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $not.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~585 debug messages>

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Serial_Paralelo.
<suppressed ~632 debug messages>

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Serial_Paralelo'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Serial_Paralelo..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Serial_Paralelo.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Serial_Paralelo'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Serial_Paralelo..
Removed 6 unused cells and 290 unused wires.
<suppressed ~7 debug messages>

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Serial_Paralelo.

10.9. Rerunning OPT passes. (Maybe there is more to do..)

10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Serial_Paralelo..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Serial_Paralelo.
Performed a total of 0 changes.

10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Serial_Paralelo'.
Removed a total of 0 cells.

10.13. Executing OPT_DFF pass (perform DFF optimizations).

10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Serial_Paralelo..

10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Serial_Paralelo.

10.16. Finished OPT passes. (There is nothing left to do.)

11. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF (noninv, pins=3, area=18.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=18.00) is a direct match for cell type $_DFFSR_PPP_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \DFF _DFF_P_ (.C( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    \DFFSR _DFFSR_PPP_ (.C( C), .D( D), .Q( Q), .R( R), .S( S));

11.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\Serial_Paralelo':
  mapped 25 $_DFF_P_ cells to \DFF cells.

12. Executing ABC pass (technology mapping using ABC).

12.1. Extracting gate netlist of module `\Serial_Paralelo' to `<abc-temp-dir>/input.blif'..
Extracted 101 gates and 132 wires to a netlist network with 28 inputs and 33 outputs.

12.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/serial_paralelo/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/serial_paralelo/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

12.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       44
ABC RESULTS:               NOR cells:       52
ABC RESULTS:               NOT cells:       28
ABC RESULTS:        internal signals:       71
ABC RESULTS:           input signals:       28
ABC RESULTS:          output signals:       33
Removing temp directory.
Removed 0 unused cells and 109 unused wires.

13. Executing Verilog backend.
Dumping module `\Serial_Paralelo'.

End of script. Logfile hash: bbc01bff2e, CPU: user 0.13s system 0.01s, MEM: 15.90 MB peak
Yosys 0.9+3565 (git sha1 474cd02e, gcc 9.3.0-10ubuntu2 -fPIC -Os)
Time spent: 34% 1x abc (0 sec), 16% 1x techmap (0 sec), ...
