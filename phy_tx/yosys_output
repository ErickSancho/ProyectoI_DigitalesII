
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3565 (git sha1 474cd02e, gcc 9.3.0-10ubuntu2 -fPIC -Os)


-- Executing script file `script_phy_tx.ys' --

1. Executing Verilog-2005 frontend: phy_tx.v
Parsing Verilog input from `phy_tx.v' to AST representation.
Generating RTLIL representation for module `\phy_tx'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: Demux32_8.v
Parsing Verilog input from `Demux32_8.v' to AST representation.
Generating RTLIL representation for module `\Demux32_8'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: module_Flops.v
Parsing Verilog input from `module_Flops.v' to AST representation.
Generating RTLIL representation for module `\module_Flops'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: module_Recirculacion.v
Parsing Verilog input from `module_Recirculacion.v' to AST representation.
Generating RTLIL representation for module `\module_Recirculacion'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: module_PS.v
Parsing Verilog input from `module_PS.v' to AST representation.
Generating RTLIL representation for module `\module_PS'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: demux_striping.v
Parsing Verilog input from `demux_striping.v' to AST representation.
Generating RTLIL representation for module `\demux_striping'.
Successfully finished Verilog frontend.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \phy_tx
Used module:     \module_PS
Used module:     \Demux32_8
Used module:     \demux_striping
Used module:     \module_Recirculacion
Used module:     \module_Flops

7.2. Analyzing design hierarchy..
Top module:  \phy_tx
Used module:     \module_PS
Used module:     \Demux32_8
Used module:     \demux_striping
Used module:     \module_Recirculacion
Used module:     \module_Flops
Removed 0 unused modules.

8. Executing PROC pass (convert processes to netlists).

8.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$demux_striping.v:13$35 in module demux_striping.
Marked 4 switch rules as full_case in process $proc$module_PS.v:12$25 in module module_PS.
Marked 1 switch rules as full_case in process $proc$module_Recirculacion.v:10$23 in module module_Recirculacion.
Marked 1 switch rules as full_case in process $proc$module_Flops.v:19$21 in module module_Flops.
Marked 1 switch rules as full_case in process $proc$module_Flops.v:10$19 in module module_Flops.
Removed a total of 0 dead cases.

8.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 10 assignments to connections.

8.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\Demux32_8.$proc$Demux32_8.v:10$18'.
  Set init value: \counter = 3'000

8.5. Executing PROC_ARST pass (detect async resets in processes).

8.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\demux_striping.$proc$demux_striping.v:13$35'.
     1/5: $0\selectorInterno[0:0]
     2/5: $0\valid_out_1[0:0]
     3/5: $0\valid_out_0[0:0]
     4/5: $0\data_out1[31:0]
     5/5: $0\data_out0[31:0]
Creating decoders for process `\module_PS.$proc$module_PS.v:9$34'.
Creating decoders for process `\module_PS.$proc$module_PS.v:12$25'.
     1/10: $0\data_in1_PS[7:0] [7]
     2/10: $0\data_in1_PS[7:0] [5]
     3/10: $0\data_in1_PS[7:0] [4]
     4/10: $0\data_in1_PS[7:0] [3]
     5/10: $0\data_in1_PS[7:0] [2]
     6/10: $0\data_in1_PS[7:0] [1]
     7/10: $0\data_in1_PS[7:0] [0]
     8/10: $0\data_in1_PS[7:0] [6]
     9/10: $0\counter[2:0]
    10/10: $0\data_out_PS[0:0]
Creating decoders for process `\module_Recirculacion.$proc$module_Recirculacion.v:10$23'.
     1/3: $1\valid_out_Recir[0:0]
     2/3: $1\data_out_Retorno[31:0]
     3/3: $1\data_out_Recir[31:0]
Creating decoders for process `\module_Flops.$proc$module_Flops.v:19$21'.
     1/1: $0\data_out_Flops[31:0]
Creating decoders for process `\module_Flops.$proc$module_Flops.v:10$19'.
     1/1: $1\valid_out_Flops[0:0]
Creating decoders for process `\Demux32_8.$proc$Demux32_8.v:10$18'.
Creating decoders for process `\Demux32_8.$proc$Demux32_8.v:28$12'.
     1/2: $0\valid_out[0:0]
     2/2: $0\data_out[7:0]
Creating decoders for process `\Demux32_8.$proc$Demux32_8.v:15$5'.
     1/1: $0\counter[2:0]
Creating decoders for process `\Demux32_8.$proc$Demux32_8.v:13$3'.
Creating decoders for process `\phy_tx.$proc$phy_tx.v:110$2'.

8.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\module_PS.\data_in2_PS' from process `\module_PS.$proc$module_PS.v:9$34'.
No latch inferred for signal `\module_Recirculacion.\valid_out_Recir' from process `\module_Recirculacion.$proc$module_Recirculacion.v:10$23'.
No latch inferred for signal `\module_Recirculacion.\data_out_Recir' from process `\module_Recirculacion.$proc$module_Recirculacion.v:10$23'.
No latch inferred for signal `\module_Recirculacion.\data_out_Retorno' from process `\module_Recirculacion.$proc$module_Recirculacion.v:10$23'.
No latch inferred for signal `\module_Flops.\valid_out_Flops' from process `\module_Flops.$proc$module_Flops.v:10$19'.
No latch inferred for signal `\Demux32_8.\notclk_4f' from process `\Demux32_8.$proc$Demux32_8.v:13$3'.
No latch inferred for signal `\phy_tx.\data_out_lane0' from process `\phy_tx.$proc$phy_tx.v:110$2'.
No latch inferred for signal `\phy_tx.\data_out_lane1' from process `\phy_tx.$proc$phy_tx.v:110$2'.
No latch inferred for signal `\phy_tx.\data_out_Recirc_Retorno' from process `\phy_tx.$proc$phy_tx.v:110$2'.

8.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\demux_striping.\data_out0' using process `\demux_striping.$proc$demux_striping.v:13$35'.
  created $dff cell `$procdff$246' with positive edge clock.
Creating register for signal `\demux_striping.\data_out1' using process `\demux_striping.$proc$demux_striping.v:13$35'.
  created $dff cell `$procdff$247' with positive edge clock.
Creating register for signal `\demux_striping.\valid_out_0' using process `\demux_striping.$proc$demux_striping.v:13$35'.
  created $dff cell `$procdff$248' with positive edge clock.
Creating register for signal `\demux_striping.\valid_out_1' using process `\demux_striping.$proc$demux_striping.v:13$35'.
  created $dff cell `$procdff$249' with positive edge clock.
Creating register for signal `\demux_striping.\selectorInterno' using process `\demux_striping.$proc$demux_striping.v:13$35'.
  created $dff cell `$procdff$250' with positive edge clock.
Creating register for signal `\module_PS.\data_out_PS' using process `\module_PS.$proc$module_PS.v:12$25'.
  created $dff cell `$procdff$251' with positive edge clock.
Creating register for signal `\module_PS.\counter' using process `\module_PS.$proc$module_PS.v:12$25'.
  created $dff cell `$procdff$252' with positive edge clock.
Creating register for signal `\module_PS.\data_in1_PS' using process `\module_PS.$proc$module_PS.v:12$25'.
  created $dff cell `$procdff$253' with positive edge clock.
Creating register for signal `\module_Flops.\data_out_Flops' using process `\module_Flops.$proc$module_Flops.v:19$21'.
  created $dff cell `$procdff$254' with positive edge clock.
Creating register for signal `\Demux32_8.\data_out' using process `\Demux32_8.$proc$Demux32_8.v:28$12'.
  created $dff cell `$procdff$255' with positive edge clock.
Creating register for signal `\Demux32_8.\valid_out' using process `\Demux32_8.$proc$Demux32_8.v:28$12'.
  created $dff cell `$procdff$256' with positive edge clock.
Creating register for signal `\Demux32_8.\counter' using process `\Demux32_8.$proc$Demux32_8.v:15$5'.
  created $dff cell `$procdff$257' with positive edge clock.

8.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 6 empty switches in `\demux_striping.$proc$demux_striping.v:13$35'.
Removing empty process `demux_striping.$proc$demux_striping.v:13$35'.
Removing empty process `module_PS.$proc$module_PS.v:9$34'.
Found and cleaned up 4 empty switches in `\module_PS.$proc$module_PS.v:12$25'.
Removing empty process `module_PS.$proc$module_PS.v:12$25'.
Found and cleaned up 1 empty switch in `\module_Recirculacion.$proc$module_Recirculacion.v:10$23'.
Removing empty process `module_Recirculacion.$proc$module_Recirculacion.v:10$23'.
Found and cleaned up 1 empty switch in `\module_Flops.$proc$module_Flops.v:19$21'.
Removing empty process `module_Flops.$proc$module_Flops.v:19$21'.
Found and cleaned up 1 empty switch in `\module_Flops.$proc$module_Flops.v:10$19'.
Removing empty process `module_Flops.$proc$module_Flops.v:10$19'.
Removing empty process `Demux32_8.$proc$Demux32_8.v:10$18'.
Found and cleaned up 5 empty switches in `\Demux32_8.$proc$Demux32_8.v:28$12'.
Removing empty process `Demux32_8.$proc$Demux32_8.v:28$12'.
Found and cleaned up 3 empty switches in `\Demux32_8.$proc$Demux32_8.v:15$5'.
Removing empty process `Demux32_8.$proc$Demux32_8.v:15$5'.
Removing empty process `Demux32_8.$proc$Demux32_8.v:13$3'.
Removing empty process `phy_tx.$proc$phy_tx.v:110$2'.
Cleaned up 21 empty switches.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demux_striping.
<suppressed ~18 debug messages>
Optimizing module module_PS.
<suppressed ~4 debug messages>
Optimizing module module_Recirculacion.
<suppressed ~1 debug messages>
Optimizing module module_Flops.
<suppressed ~2 debug messages>
Optimizing module Demux32_8.
<suppressed ~8 debug messages>
Optimizing module phy_tx.

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demux_striping'.
<suppressed ~15 debug messages>
Finding identical cells in module `\module_PS'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\Demux32_8'.
<suppressed ~6 debug messages>
Finding identical cells in module `\phy_tx'.
Removed a total of 8 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demux_striping..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$50: \selectorInterno -> 1'1
      Replacing known input bits on port A of cell $procmux$55: \selectorInterno -> 1'0
  Analyzing evaluation results.
Running muxtree optimizer on module \module_PS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_Recirculacion..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_Flops..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Demux32_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$240.
Running muxtree optimizer on module \phy_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 1 multiplexer ports.
<suppressed ~23 debug messages>

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demux_striping.
  Optimizing cells in module \module_PS.
  Optimizing cells in module \module_Recirculacion.
  Optimizing cells in module \module_Flops.
  Optimizing cells in module \Demux32_8.
  Optimizing cells in module \phy_tx.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demux_striping'.
Finding identical cells in module `\module_PS'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\Demux32_8'.
Finding identical cells in module `\phy_tx'.
Removed a total of 1 cells.

9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$250 ($dff) from module demux_striping (D = $procmux$59_Y, Q = \selectorInterno, rval = 1'0).
Adding SRST signal on $procdff$249 ($dff) from module demux_striping (D = $procmux$65_Y, Q = \valid_out_1, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$259 ($sdff) from module demux_striping (D = \valid_in, Q = \valid_out_1).
Adding SRST signal on $procdff$248 ($dff) from module demux_striping (D = $procmux$71_Y, Q = \valid_out_0, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$261 ($sdff) from module demux_striping (D = \valid_in, Q = \valid_out_0).
Adding SRST signal on $procdff$246 ($dff) from module demux_striping (D = $procmux$83_Y, Q = \data_out0, rval = 0).
Adding EN signal on $auto$opt_dff.cc:702:run$263 ($sdff) from module demux_striping (D = \data_in, Q = \data_out0).
Adding SRST signal on $procdff$247 ($dff) from module demux_striping (D = $procmux$77_Y, Q = \data_out1, rval = 0).
Adding EN signal on $auto$opt_dff.cc:702:run$265 ($sdff) from module demux_striping (D = \data_in, Q = \data_out1).
Adding SRST signal on $procdff$253 ($dff) from module module_PS (D = { $procmux$96_Y $procmux$180_Y $procmux$108_Y $procmux$120_Y $procmux$132_Y $procmux$144_Y $procmux$156_Y }, Q = \data_in1_PS [7:1], rval = 7'0000000).
Adding SRST signal on $procdff$253 ($dff) from module module_PS (D = $procmux$166_Y, Q = \data_in1_PS [0], rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$270 ($sdff) from module module_PS (D = $procmux$164_Y, Q = \data_in1_PS [0]).
Adding EN signal on $auto$opt_dff.cc:702:run$267 ($sdff) from module module_PS (D = { $procmux$96_Y $procmux$180_Y $procmux$108_Y $procmux$120_Y $procmux$132_Y $procmux$144_Y $procmux$156_Y }, Q = \data_in1_PS [7:1]).
Adding SRST signal on $procdff$252 ($dff) from module module_PS (D = $procmux$189_Y, Q = \counter, rval = 3'000).
Adding SRST signal on $procdff$251 ($dff) from module module_PS (D = $procmux$201_Y, Q = \data_out_PS, rval = 1'0).
Adding SRST signal on $procdff$254 ($dff) from module module_Flops (D = \data_in, Q = \data_out_Flops, rval = 0).
Adding SRST signal on $procdff$257 ($dff) from module Demux32_8 (D = $procmux$242_Y [0], Q = \counter [0], rval = 1'0).
Adding SRST signal on $procdff$257 ($dff) from module Demux32_8 (D = $procmux$240_Y [2:1], Q = \counter [2:1], rval = 2'00).
Adding SRST signal on $procdff$256 ($dff) from module Demux32_8 (D = $procmux$226_Y, Q = \valid_out, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$284 ($sdff) from module Demux32_8 (D = $procmux$226_Y, Q = \valid_out).
Adding SRST signal on $procdff$255 ($dff) from module Demux32_8 (D = $procmux$236_Y, Q = \data_out, rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$288 ($sdff) from module Demux32_8 (D = $procmux$236_Y, Q = \data_out).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demux_striping..
Finding unused cells or wires in module \module_PS..
Finding unused cells or wires in module \module_Recirculacion..
Finding unused cells or wires in module \module_Flops..
Finding unused cells or wires in module \Demux32_8..
Finding unused cells or wires in module \phy_tx..
Removed 30 unused cells and 154 unused wires.
<suppressed ~39 debug messages>

9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Demux32_8.
<suppressed ~2 debug messages>
Optimizing module demux_striping.
Optimizing module module_Flops.
Optimizing module module_PS.
Optimizing module module_Recirculacion.
Optimizing module phy_tx.

9.9. Rerunning OPT passes. (Maybe there is more to do..)

9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Demux32_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \demux_striping..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_Flops..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_PS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_Recirculacion..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \phy_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Demux32_8.
  Optimizing cells in module \demux_striping.
  Optimizing cells in module \module_Flops.
  Optimizing cells in module \module_PS.
  Optimizing cells in module \module_Recirculacion.
  Optimizing cells in module \phy_tx.
Performed a total of 0 changes.

9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Demux32_8'.
<suppressed ~3 debug messages>
Finding identical cells in module `\demux_striping'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\module_PS'.
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\phy_tx'.
Removed a total of 1 cells.

9.13. Executing OPT_DFF pass (perform DFF optimizations).

9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Demux32_8..
Finding unused cells or wires in module \demux_striping..
Finding unused cells or wires in module \module_Flops..
Finding unused cells or wires in module \module_PS..
Finding unused cells or wires in module \module_Recirculacion..
Finding unused cells or wires in module \phy_tx..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Demux32_8.
Optimizing module demux_striping.
Optimizing module module_Flops.
Optimizing module module_PS.
Optimizing module module_Recirculacion.
Optimizing module phy_tx.

9.16. Rerunning OPT passes. (Maybe there is more to do..)

9.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Demux32_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \demux_striping..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_Flops..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_PS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_Recirculacion..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \phy_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

9.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Demux32_8.
  Optimizing cells in module \demux_striping.
  Optimizing cells in module \module_Flops.
  Optimizing cells in module \module_PS.
  Optimizing cells in module \module_Recirculacion.
  Optimizing cells in module \phy_tx.
Performed a total of 0 changes.

9.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Demux32_8'.
Finding identical cells in module `\demux_striping'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\module_PS'.
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\phy_tx'.
Removed a total of 0 cells.

9.20. Executing OPT_DFF pass (perform DFF optimizations).

9.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Demux32_8..
Finding unused cells or wires in module \demux_striping..
Finding unused cells or wires in module \module_Flops..
Finding unused cells or wires in module \module_PS..
Finding unused cells or wires in module \module_Recirculacion..
Finding unused cells or wires in module \phy_tx..

9.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module Demux32_8.
Optimizing module demux_striping.
Optimizing module module_Flops.
Optimizing module module_PS.
Optimizing module module_Recirculacion.
Optimizing module phy_tx.

9.23. Finished OPT passes. (There is nothing left to do.)

10. Executing FSM pass (extract and optimize FSM).

10.1. Executing FSM_DETECT pass (finding FSMs in design).

10.2. Executing FSM_EXTRACT pass (extracting FSM from design).

10.3. Executing FSM_OPT pass (simple optimizations of FSMs).

10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Demux32_8..
Finding unused cells or wires in module \demux_striping..
Finding unused cells or wires in module \module_Flops..
Finding unused cells or wires in module \module_PS..
Finding unused cells or wires in module \module_Recirculacion..
Finding unused cells or wires in module \phy_tx..

10.5. Executing FSM_OPT pass (simple optimizations of FSMs).

10.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

10.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

10.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Demux32_8.
Optimizing module demux_striping.
Optimizing module module_Flops.
Optimizing module module_PS.
Optimizing module module_Recirculacion.
Optimizing module phy_tx.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Demux32_8'.
Finding identical cells in module `\demux_striping'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\module_PS'.
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\phy_tx'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Demux32_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \demux_striping..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_Flops..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_PS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_Recirculacion..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \phy_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Demux32_8.
  Optimizing cells in module \demux_striping.
  Optimizing cells in module \module_Flops.
  Optimizing cells in module \module_PS.
  Optimizing cells in module \module_Recirculacion.
  Optimizing cells in module \phy_tx.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Demux32_8'.
Finding identical cells in module `\demux_striping'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\module_PS'.
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\phy_tx'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Demux32_8..
Finding unused cells or wires in module \demux_striping..
Finding unused cells or wires in module \module_Flops..
Finding unused cells or wires in module \module_PS..
Finding unused cells or wires in module \module_Recirculacion..
Finding unused cells or wires in module \phy_tx..

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Demux32_8.
Optimizing module demux_striping.
Optimizing module module_Flops.
Optimizing module module_PS.
Optimizing module module_Recirculacion.
Optimizing module phy_tx.

11.9. Finished OPT passes. (There is nothing left to do.)

12. Executing MEMORY pass.

12.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

12.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

12.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Demux32_8..
Finding unused cells or wires in module \demux_striping..
Finding unused cells or wires in module \module_Flops..
Finding unused cells or wires in module \module_PS..
Finding unused cells or wires in module \module_Recirculacion..
Finding unused cells or wires in module \phy_tx..

12.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

12.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Demux32_8..
Finding unused cells or wires in module \demux_striping..
Finding unused cells or wires in module \module_Flops..
Finding unused cells or wires in module \module_PS..
Finding unused cells or wires in module \module_Recirculacion..
Finding unused cells or wires in module \phy_tx..

12.6. Executing MEMORY_COLLECT pass (generating $mem cells).

12.7. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Demux32_8.
Optimizing module demux_striping.
Optimizing module module_Flops.
Optimizing module module_PS.
Optimizing module module_Recirculacion.
Optimizing module phy_tx.

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Demux32_8'.
Finding identical cells in module `\demux_striping'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\module_PS'.
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\phy_tx'.
Removed a total of 0 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Demux32_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \demux_striping..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_Flops..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_PS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_Recirculacion..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \phy_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Demux32_8.
  Optimizing cells in module \demux_striping.
  Optimizing cells in module \module_Flops.
  Optimizing cells in module \module_PS.
  Optimizing cells in module \module_Recirculacion.
  Optimizing cells in module \phy_tx.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Demux32_8'.
Finding identical cells in module `\demux_striping'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\module_PS'.
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\phy_tx'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Demux32_8..
Finding unused cells or wires in module \demux_striping..
Finding unused cells or wires in module \module_Flops..
Finding unused cells or wires in module \module_PS..
Finding unused cells or wires in module \module_Recirculacion..
Finding unused cells or wires in module \phy_tx..

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Demux32_8.
Optimizing module demux_striping.
Optimizing module module_Flops.
Optimizing module module_PS.
Optimizing module module_Recirculacion.
Optimizing module phy_tx.

13.9. Finished OPT passes. (There is nothing left to do.)

14. Executing TECHMAP pass (map to technology primitives).

14.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

14.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $ne.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $sdff.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $reduce_bool.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
No more expansions possible.
<suppressed ~639 debug messages>

15. Executing OPT pass (performing simple optimizations).

15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Demux32_8.
<suppressed ~347 debug messages>
Optimizing module demux_striping.
Optimizing module module_Flops.
Optimizing module module_PS.
<suppressed ~316 debug messages>
Optimizing module module_Recirculacion.
Optimizing module phy_tx.

15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Demux32_8'.
<suppressed ~9 debug messages>
Finding identical cells in module `\demux_striping'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\module_PS'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\phy_tx'.
Removed a total of 4 cells.

15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Demux32_8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \demux_striping..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \module_Flops..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \module_PS..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \module_Recirculacion..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \phy_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Demux32_8.
  Optimizing cells in module \demux_striping.
  Optimizing cells in module \module_Flops.
  Optimizing cells in module \module_PS.
  Optimizing cells in module \module_Recirculacion.
  Optimizing cells in module \phy_tx.
Performed a total of 0 changes.

15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Demux32_8'.
Finding identical cells in module `\demux_striping'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\module_PS'.
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\phy_tx'.
Removed a total of 0 cells.

15.6. Executing OPT_DFF pass (perform DFF optimizations).

15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Demux32_8..
Finding unused cells or wires in module \demux_striping..
Finding unused cells or wires in module \module_Flops..
Finding unused cells or wires in module \module_PS..
Finding unused cells or wires in module \module_Recirculacion..
Finding unused cells or wires in module \phy_tx..
Removed 7 unused cells and 300 unused wires.
<suppressed ~9 debug messages>

15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Demux32_8.
Optimizing module demux_striping.
Optimizing module module_Flops.
Optimizing module module_PS.
Optimizing module module_Recirculacion.
Optimizing module phy_tx.

15.9. Rerunning OPT passes. (Maybe there is more to do..)

15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Demux32_8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \demux_striping..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \module_Flops..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \module_PS..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \module_Recirculacion..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \phy_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Demux32_8.
  Optimizing cells in module \demux_striping.
  Optimizing cells in module \module_Flops.
  Optimizing cells in module \module_PS.
  Optimizing cells in module \module_Recirculacion.
  Optimizing cells in module \phy_tx.
Performed a total of 0 changes.

15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Demux32_8'.
Finding identical cells in module `\demux_striping'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\module_PS'.
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\phy_tx'.
Removed a total of 0 cells.

15.13. Executing OPT_DFF pass (perform DFF optimizations).

15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Demux32_8..
Finding unused cells or wires in module \demux_striping..
Finding unused cells or wires in module \module_Flops..
Finding unused cells or wires in module \module_PS..
Finding unused cells or wires in module \module_Recirculacion..
Finding unused cells or wires in module \phy_tx..

15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Demux32_8.
Optimizing module demux_striping.
Optimizing module module_Flops.
Optimizing module module_PS.
Optimizing module module_Recirculacion.
Optimizing module phy_tx.

15.16. Finished OPT passes. (There is nothing left to do.)

16. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF (noninv, pins=3, area=18.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=18.00) is a direct match for cell type $_DFFSR_PPP_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \DFF _DFF_P_ (.C( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    \DFFSR _DFFSR_PPP_ (.C( C), .D( D), .Q( Q), .R( R), .S( S));

16.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\Demux32_8':
  mapped 12 $_DFF_P_ cells to \DFF cells.
Mapping DFF cells in module `\demux_striping':
  mapped 67 $_DFF_P_ cells to \DFF cells.
Mapping DFF cells in module `\module_Flops':
  mapped 32 $_DFF_P_ cells to \DFF cells.
Mapping DFF cells in module `\module_PS':
  mapped 11 $_DFF_P_ cells to \DFF cells.
Mapping DFF cells in module `\module_Recirculacion':
Mapping DFF cells in module `\phy_tx':

17. Executing ABC pass (technology mapping using ABC).

17.1. Extracting gate netlist of module `\Demux32_8' to `<abc-temp-dir>/input.blif'..
Extracted 85 gates and 134 wires to a netlist network with 46 inputs and 15 outputs.

17.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy_tx/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy_tx/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

17.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       18
ABC RESULTS:               NOR cells:       81
ABC RESULTS:               NOT cells:       49
ABC RESULTS:        internal signals:       73
ABC RESULTS:           input signals:       46
ABC RESULTS:          output signals:       15
Removing temp directory.

17.2. Extracting gate netlist of module `\demux_striping' to `<abc-temp-dir>/input.blif'..
Extracted 142 gates and 245 wires to a netlist network with 101 inputs and 67 outputs.

17.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy_tx/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy_tx/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

17.2.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:      134
ABC RESULTS:               NOR cells:      135
ABC RESULTS:               NOT cells:       67
ABC RESULTS:        internal signals:       77
ABC RESULTS:           input signals:      101
ABC RESULTS:          output signals:       67
Removing temp directory.

17.3. Extracting gate netlist of module `\module_Flops' to `<abc-temp-dir>/input.blif'..
Extracted 33 gates and 68 wires to a netlist network with 34 inputs and 33 outputs.

17.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy_tx/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy_tx/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

17.3.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       33
ABC RESULTS:               NOT cells:       33
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:       33
Removing temp directory.

17.4. Extracting gate netlist of module `\module_PS' to `<abc-temp-dir>/input.blif'..
Extracted 68 gates and 91 wires to a netlist network with 20 inputs and 11 outputs.

17.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy_tx/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy_tx/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

17.4.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       11
ABC RESULTS:               NOR cells:       44
ABC RESULTS:               NOT cells:       10
ABC RESULTS:        internal signals:       60
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:       11
Removing temp directory.

17.5. Extracting gate netlist of module `\module_Recirculacion' to `<abc-temp-dir>/input.blif'..
Extracted 65 gates and 100 wires to a netlist network with 34 inputs and 65 outputs.

17.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy_tx/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy_tx/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

17.5.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       33
ABC RESULTS:               NOR cells:       32
ABC RESULTS:               NOT cells:       65
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:       65
Removing temp directory.

17.6. Extracting gate netlist of module `\phy_tx' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

17.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy_tx/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy_tx/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

17.6.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.
Removed 0 unused cells and 593 unused wires.

18. Executing Verilog backend.
Dumping module `\Demux32_8'.
Dumping module `\demux_striping'.
Dumping module `\module_Flops'.
Dumping module `\module_PS'.
Dumping module `\module_Recirculacion'.
Dumping module `\phy_tx'.

End of script. Logfile hash: 91c7ae76be, CPU: user 0.44s system 0.01s, MEM: 16.30 MB peak
Yosys 0.9+3565 (git sha1 474cd02e, gcc 9.3.0-10ubuntu2 -fPIC -Os)
Time spent: 52% 1x abc (0 sec), 16% 2x write_verilog (0 sec), ...
