
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3565 (git sha1 474cd02e, gcc 9.3.0-10ubuntu2 -fPIC -Os)


-- Executing script file `script_phy.ys' --

1. Executing Verilog-2005 frontend: Demux32_8.v
Parsing Verilog input from `Demux32_8.v' to AST representation.
Generating RTLIL representation for module `\Demux32_8'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: module_Flops.v
Parsing Verilog input from `module_Flops.v' to AST representation.
Generating RTLIL representation for module `\module_Flops'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: module_Recirculacion.v
Parsing Verilog input from `module_Recirculacion.v' to AST representation.
Generating RTLIL representation for module `\module_Recirculacion'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: module_PS.v
Parsing Verilog input from `module_PS.v' to AST representation.
Generating RTLIL representation for module `\module_PS'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: demux_striping.v
Parsing Verilog input from `demux_striping.v' to AST representation.
Generating RTLIL representation for module `\demux_striping'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: Serial_Paralelo.v
Parsing Verilog input from `Serial_Paralelo.v' to AST representation.
Generating RTLIL representation for module `\Serial_Paralelo'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: Mux8_32.v
Parsing Verilog input from `Mux8_32.v' to AST representation.
Generating RTLIL representation for module `\Mux8_32'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: mux_unstriping.v
Parsing Verilog input from `mux_unstriping.v' to AST representation.
Generating RTLIL representation for module `\mux_unstriping'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: phy_tx.v
Parsing Verilog input from `phy_tx.v' to AST representation.
Generating RTLIL representation for module `\phy_tx'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: phy_rx.v
Parsing Verilog input from `phy_rx.v' to AST representation.
Generating RTLIL representation for module `\phy_rx'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: phy.v
Parsing Verilog input from `phy.v' to AST representation.
Generating RTLIL representation for module `\phy'.
phy.v:22: Warning: Identifier `\data_out_lane0' is implicitly declared.
phy.v:23: Warning: Identifier `\data_out_lane1' is implicitly declared.
Successfully finished Verilog frontend.

12. Executing HIERARCHY pass (managing design hierarchy).

12.1. Analyzing design hierarchy..
Top module:  \phy
Used module:     \phy_rx
Used module:         \module_Flops
Used module:         \mux_unstriping
Used module:         \Mux8_32
Used module:         \Serial_Paralelo
Used module:     \phy_tx
Used module:         \module_PS
Used module:         \Demux32_8
Used module:         \demux_striping
Used module:         \module_Recirculacion

12.2. Analyzing design hierarchy..
Top module:  \phy
Used module:     \phy_rx
Used module:         \module_Flops
Used module:         \mux_unstriping
Used module:         \Mux8_32
Used module:         \Serial_Paralelo
Used module:     \phy_tx
Used module:         \module_PS
Used module:         \Demux32_8
Used module:         \demux_striping
Used module:         \module_Recirculacion
Removed 0 unused modules.

13. Executing PROC pass (convert processes to netlists).

13.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

13.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$mux_unstriping.v:13$70 in module mux_unstriping.
Marked 1 switch rules as full_case in process $proc$Mux8_32.v:32$66 in module Mux8_32.
Marked 1 switch rules as full_case in process $proc$Mux8_32.v:19$64 in module Mux8_32.
Marked 4 switch rules as full_case in process $proc$Serial_Paralelo.v:44$52 in module Serial_Paralelo.
Marked 1 switch rules as full_case in process $proc$Serial_Paralelo.v:21$50 in module Serial_Paralelo.
Marked 4 switch rules as full_case in process $proc$demux_striping.v:13$33 in module demux_striping.
Marked 4 switch rules as full_case in process $proc$module_PS.v:12$23 in module module_PS.
Marked 1 switch rules as full_case in process $proc$module_Recirculacion.v:10$21 in module module_Recirculacion.
Marked 1 switch rules as full_case in process $proc$module_Flops.v:19$19 in module module_Flops.
Marked 1 switch rules as full_case in process $proc$module_Flops.v:10$17 in module module_Flops.
Removed a total of 0 dead cases.

13.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 10 redundant assignments.
Promoted 29 assignments to connections.

13.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\Demux32_8.$proc$Demux32_8.v:10$16'.
  Set init value: \counter = 3'000

13.5. Executing PROC_ARST pass (detect async resets in processes).

13.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\phy.$proc$phy.v:51$82'.
Creating decoders for process `\phy_rx.$proc$phy_rx.v:115$81'.
Creating decoders for process `\phy_rx.$proc$phy_rx.v:88$80'.
Creating decoders for process `\phy_rx.$proc$phy_rx.v:58$79'.
Creating decoders for process `\phy_tx.$proc$phy_tx.v:110$78'.
Creating decoders for process `\mux_unstriping.$proc$mux_unstriping.v:13$70'.
     1/3: $0\valid_out[0:0]
     2/3: $0\data_out[31:0]
     3/3: $0\selectorInterno[0:0]
Creating decoders for process `\Mux8_32.$proc$Mux8_32.v:32$66'.
     1/2: $0\valid_out[0:0]
     2/2: $0\data_out[31:0]
Creating decoders for process `\Mux8_32.$proc$Mux8_32.v:19$64'.
     1/4: $0\mem[31:0] [31:24]
     2/4: $0\mem[31:0] [15:8]
     3/4: $0\mem[31:0] [7:0]
     4/4: $0\mem[31:0] [23:16]
Creating decoders for process `\Mux8_32.$proc$Mux8_32.v:12$62'.
Creating decoders for process `\Serial_Paralelo.$proc$Serial_Paralelo.v:87$61'.
Creating decoders for process `\Serial_Paralelo.$proc$Serial_Paralelo.v:44$52'.
     1/5: $0\counter_out[3:0]
     2/5: $0\valid_out_pre1[0:0]
     3/5: $0\data_out_pre1[7:0]
     4/5: $0\contador_BC[2:0]
     5/5: $0\active[0:0]
Creating decoders for process `\Serial_Paralelo.$proc$Serial_Paralelo.v:21$50'.
     1/8: $0\buffer[7:0] [7]
     2/8: $0\buffer[7:0] [5]
     3/8: $0\buffer[7:0] [4]
     4/8: $0\buffer[7:0] [3]
     5/8: $0\buffer[7:0] [2]
     6/8: $0\buffer[7:0] [1]
     7/8: $0\buffer[7:0] [0]
     8/8: $0\buffer[7:0] [6]
Creating decoders for process `\Serial_Paralelo.$proc$Serial_Paralelo.v:17$48'.
Creating decoders for process `\demux_striping.$proc$demux_striping.v:13$33'.
     1/5: $0\selectorInterno[0:0]
     2/5: $0\valid_out_1[0:0]
     3/5: $0\valid_out_0[0:0]
     4/5: $0\data_out1[31:0]
     5/5: $0\data_out0[31:0]
Creating decoders for process `\module_PS.$proc$module_PS.v:9$32'.
Creating decoders for process `\module_PS.$proc$module_PS.v:12$23'.
     1/10: $0\data_in1_PS[7:0] [7]
     2/10: $0\data_in1_PS[7:0] [5]
     3/10: $0\data_in1_PS[7:0] [4]
     4/10: $0\data_in1_PS[7:0] [3]
     5/10: $0\data_in1_PS[7:0] [2]
     6/10: $0\data_in1_PS[7:0] [1]
     7/10: $0\data_in1_PS[7:0] [0]
     8/10: $0\data_in1_PS[7:0] [6]
     9/10: $0\counter[2:0]
    10/10: $0\data_out_PS[0:0]
Creating decoders for process `\module_Recirculacion.$proc$module_Recirculacion.v:10$21'.
     1/3: $1\valid_out_Recir[0:0]
     2/3: $1\data_out_Retorno[31:0]
     3/3: $1\data_out_Recir[31:0]
Creating decoders for process `\module_Flops.$proc$module_Flops.v:19$19'.
     1/1: $0\data_out_Flops[31:0]
Creating decoders for process `\module_Flops.$proc$module_Flops.v:10$17'.
     1/1: $1\valid_out_Flops[0:0]
Creating decoders for process `\Demux32_8.$proc$Demux32_8.v:10$16'.
Creating decoders for process `\Demux32_8.$proc$Demux32_8.v:28$10'.
     1/2: $0\valid_out[0:0]
     2/2: $0\data_out[7:0]
Creating decoders for process `\Demux32_8.$proc$Demux32_8.v:15$3'.
     1/1: $0\counter[2:0]
Creating decoders for process `\Demux32_8.$proc$Demux32_8.v:13$1'.

13.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\phy.\data_out' from process `\phy.$proc$phy.v:51$82'.
No latch inferred for signal `\phy.\valid_out' from process `\phy.$proc$phy.v:51$82'.
No latch inferred for signal `\phy.\data_out_Recirc_Retorno' from process `\phy.$proc$phy.v:51$82'.
No latch inferred for signal `\phy_rx.\data_out' from process `\phy_rx.$proc$phy_rx.v:115$81'.
No latch inferred for signal `\phy_rx.\valid_out' from process `\phy_rx.$proc$phy_rx.v:115$81'.
No latch inferred for signal `\phy_rx.\active0' from process `\phy_rx.$proc$phy_rx.v:115$81'.
No latch inferred for signal `\phy_rx.\active1' from process `\phy_rx.$proc$phy_rx.v:115$81'.
No latch inferred for signal `\phy_tx.\data_out_lane0' from process `\phy_tx.$proc$phy_tx.v:110$78'.
No latch inferred for signal `\phy_tx.\data_out_lane1' from process `\phy_tx.$proc$phy_tx.v:110$78'.
No latch inferred for signal `\phy_tx.\data_out_Recirc_Retorno' from process `\phy_tx.$proc$phy_tx.v:110$78'.
No latch inferred for signal `\Mux8_32.\notclk_4f' from process `\Mux8_32.$proc$Mux8_32.v:12$62'.
No latch inferred for signal `\Serial_Paralelo.\not_clk_32f' from process `\Serial_Paralelo.$proc$Serial_Paralelo.v:17$48'.
No latch inferred for signal `\module_PS.\data_in2_PS' from process `\module_PS.$proc$module_PS.v:9$32'.
No latch inferred for signal `\module_Recirculacion.\valid_out_Recir' from process `\module_Recirculacion.$proc$module_Recirculacion.v:10$21'.
No latch inferred for signal `\module_Recirculacion.\data_out_Recir' from process `\module_Recirculacion.$proc$module_Recirculacion.v:10$21'.
No latch inferred for signal `\module_Recirculacion.\data_out_Retorno' from process `\module_Recirculacion.$proc$module_Recirculacion.v:10$21'.
No latch inferred for signal `\Demux32_8.\notclk_4f' from process `\Demux32_8.$proc$Demux32_8.v:13$1'.

13.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\phy_rx.\data_lane0' using process `\phy_rx.$proc$phy_rx.v:88$80'.
  created $dff cell `$procdff$411' with positive edge clock.
Creating register for signal `\phy_rx.\valid_lane0' using process `\phy_rx.$proc$phy_rx.v:88$80'.
  created $dff cell `$procdff$412' with positive edge clock.
Creating register for signal `\phy_rx.\salida_sp1_a1' using process `\phy_rx.$proc$phy_rx.v:58$79'.
  created $dff cell `$procdff$413' with positive edge clock.
Creating register for signal `\phy_rx.\salida_sp1_a2' using process `\phy_rx.$proc$phy_rx.v:58$79'.
  created $dff cell `$procdff$414' with positive edge clock.
Creating register for signal `\phy_rx.\valid_sp1_a1' using process `\phy_rx.$proc$phy_rx.v:58$79'.
  created $dff cell `$procdff$415' with positive edge clock.
Creating register for signal `\phy_rx.\valid_sp1_a2' using process `\phy_rx.$proc$phy_rx.v:58$79'.
  created $dff cell `$procdff$416' with positive edge clock.
Creating register for signal `\mux_unstriping.\data_out' using process `\mux_unstriping.$proc$mux_unstriping.v:13$70'.
  created $dff cell `$procdff$417' with positive edge clock.
Creating register for signal `\mux_unstriping.\valid_out' using process `\mux_unstriping.$proc$mux_unstriping.v:13$70'.
  created $dff cell `$procdff$418' with positive edge clock.
Creating register for signal `\mux_unstriping.\selectorInterno' using process `\mux_unstriping.$proc$mux_unstriping.v:13$70'.
  created $dff cell `$procdff$419' with positive edge clock.
Creating register for signal `\Mux8_32.\data_out' using process `\Mux8_32.$proc$Mux8_32.v:32$66'.
  created $dff cell `$procdff$420' with positive edge clock.
Creating register for signal `\Mux8_32.\valid_out' using process `\Mux8_32.$proc$Mux8_32.v:32$66'.
  created $dff cell `$procdff$421' with positive edge clock.
Creating register for signal `\Mux8_32.\mem' using process `\Mux8_32.$proc$Mux8_32.v:19$64'.
  created $dff cell `$procdff$422' with positive edge clock.
Creating register for signal `\Serial_Paralelo.\data_out' using process `\Serial_Paralelo.$proc$Serial_Paralelo.v:87$61'.
  created $dff cell `$procdff$423' with positive edge clock.
Creating register for signal `\Serial_Paralelo.\valid_out' using process `\Serial_Paralelo.$proc$Serial_Paralelo.v:87$61'.
  created $dff cell `$procdff$424' with positive edge clock.
Creating register for signal `\Serial_Paralelo.\data_out_pre2' using process `\Serial_Paralelo.$proc$Serial_Paralelo.v:87$61'.
  created $dff cell `$procdff$425' with positive edge clock.
Creating register for signal `\Serial_Paralelo.\valid_out_pre2' using process `\Serial_Paralelo.$proc$Serial_Paralelo.v:87$61'.
  created $dff cell `$procdff$426' with positive edge clock.
Creating register for signal `\Serial_Paralelo.\active' using process `\Serial_Paralelo.$proc$Serial_Paralelo.v:44$52'.
  created $dff cell `$procdff$427' with positive edge clock.
Creating register for signal `\Serial_Paralelo.\contador_BC' using process `\Serial_Paralelo.$proc$Serial_Paralelo.v:44$52'.
  created $dff cell `$procdff$428' with positive edge clock.
Creating register for signal `\Serial_Paralelo.\counter_out' using process `\Serial_Paralelo.$proc$Serial_Paralelo.v:44$52'.
  created $dff cell `$procdff$429' with positive edge clock.
Creating register for signal `\Serial_Paralelo.\data_out_pre1' using process `\Serial_Paralelo.$proc$Serial_Paralelo.v:44$52'.
  created $dff cell `$procdff$430' with positive edge clock.
Creating register for signal `\Serial_Paralelo.\valid_out_pre1' using process `\Serial_Paralelo.$proc$Serial_Paralelo.v:44$52'.
  created $dff cell `$procdff$431' with positive edge clock.
Creating register for signal `\Serial_Paralelo.\buffer' using process `\Serial_Paralelo.$proc$Serial_Paralelo.v:21$50'.
  created $dff cell `$procdff$432' with positive edge clock.
Creating register for signal `\demux_striping.\data_out0' using process `\demux_striping.$proc$demux_striping.v:13$33'.
  created $dff cell `$procdff$433' with positive edge clock.
Creating register for signal `\demux_striping.\data_out1' using process `\demux_striping.$proc$demux_striping.v:13$33'.
  created $dff cell `$procdff$434' with positive edge clock.
Creating register for signal `\demux_striping.\valid_out_0' using process `\demux_striping.$proc$demux_striping.v:13$33'.
  created $dff cell `$procdff$435' with positive edge clock.
Creating register for signal `\demux_striping.\valid_out_1' using process `\demux_striping.$proc$demux_striping.v:13$33'.
  created $dff cell `$procdff$436' with positive edge clock.
Creating register for signal `\demux_striping.\selectorInterno' using process `\demux_striping.$proc$demux_striping.v:13$33'.
  created $dff cell `$procdff$437' with positive edge clock.
Creating register for signal `\module_PS.\counter' using process `\module_PS.$proc$module_PS.v:12$23'.
  created $dff cell `$procdff$438' with positive edge clock.
Creating register for signal `\module_PS.\data_out_PS' using process `\module_PS.$proc$module_PS.v:12$23'.
  created $dff cell `$procdff$439' with positive edge clock.
Creating register for signal `\module_PS.\data_in1_PS' using process `\module_PS.$proc$module_PS.v:12$23'.
  created $dff cell `$procdff$440' with positive edge clock.
Creating register for signal `\module_Flops.\data_out_Flops' using process `\module_Flops.$proc$module_Flops.v:19$19'.
  created $dff cell `$procdff$441' with positive edge clock.
Creating register for signal `\module_Flops.\valid_out_Flops' using process `\module_Flops.$proc$module_Flops.v:10$17'.
  created $dff cell `$procdff$442' with positive edge clock.
Creating register for signal `\Demux32_8.\data_out' using process `\Demux32_8.$proc$Demux32_8.v:28$10'.
  created $dff cell `$procdff$443' with positive edge clock.
Creating register for signal `\Demux32_8.\valid_out' using process `\Demux32_8.$proc$Demux32_8.v:28$10'.
  created $dff cell `$procdff$444' with positive edge clock.
Creating register for signal `\Demux32_8.\counter' using process `\Demux32_8.$proc$Demux32_8.v:15$3'.
  created $dff cell `$procdff$445' with positive edge clock.

13.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `phy.$proc$phy.v:51$82'.
Removing empty process `phy_rx.$proc$phy_rx.v:115$81'.
Removing empty process `phy_rx.$proc$phy_rx.v:88$80'.
Removing empty process `phy_rx.$proc$phy_rx.v:58$79'.
Removing empty process `phy_tx.$proc$phy_tx.v:110$78'.
Found and cleaned up 4 empty switches in `\mux_unstriping.$proc$mux_unstriping.v:13$70'.
Removing empty process `mux_unstriping.$proc$mux_unstriping.v:13$70'.
Found and cleaned up 1 empty switch in `\Mux8_32.$proc$Mux8_32.v:32$66'.
Removing empty process `Mux8_32.$proc$Mux8_32.v:32$66'.
Found and cleaned up 1 empty switch in `\Mux8_32.$proc$Mux8_32.v:19$64'.
Removing empty process `Mux8_32.$proc$Mux8_32.v:19$64'.
Removing empty process `Mux8_32.$proc$Mux8_32.v:12$62'.
Removing empty process `Serial_Paralelo.$proc$Serial_Paralelo.v:87$61'.
Found and cleaned up 6 empty switches in `\Serial_Paralelo.$proc$Serial_Paralelo.v:44$52'.
Removing empty process `Serial_Paralelo.$proc$Serial_Paralelo.v:44$52'.
Found and cleaned up 1 empty switch in `\Serial_Paralelo.$proc$Serial_Paralelo.v:21$50'.
Removing empty process `Serial_Paralelo.$proc$Serial_Paralelo.v:21$50'.
Removing empty process `Serial_Paralelo.$proc$Serial_Paralelo.v:17$48'.
Found and cleaned up 6 empty switches in `\demux_striping.$proc$demux_striping.v:13$33'.
Removing empty process `demux_striping.$proc$demux_striping.v:13$33'.
Removing empty process `module_PS.$proc$module_PS.v:9$32'.
Found and cleaned up 4 empty switches in `\module_PS.$proc$module_PS.v:12$23'.
Removing empty process `module_PS.$proc$module_PS.v:12$23'.
Found and cleaned up 1 empty switch in `\module_Recirculacion.$proc$module_Recirculacion.v:10$21'.
Removing empty process `module_Recirculacion.$proc$module_Recirculacion.v:10$21'.
Found and cleaned up 1 empty switch in `\module_Flops.$proc$module_Flops.v:19$19'.
Removing empty process `module_Flops.$proc$module_Flops.v:19$19'.
Found and cleaned up 1 empty switch in `\module_Flops.$proc$module_Flops.v:10$17'.
Removing empty process `module_Flops.$proc$module_Flops.v:10$17'.
Removing empty process `Demux32_8.$proc$Demux32_8.v:10$16'.
Found and cleaned up 5 empty switches in `\Demux32_8.$proc$Demux32_8.v:28$10'.
Removing empty process `Demux32_8.$proc$Demux32_8.v:28$10'.
Found and cleaned up 3 empty switches in `\Demux32_8.$proc$Demux32_8.v:15$3'.
Removing empty process `Demux32_8.$proc$Demux32_8.v:15$3'.
Removing empty process `Demux32_8.$proc$Demux32_8.v:13$1'.
Cleaned up 34 empty switches.

14. Executing OPT pass (performing simple optimizations).

14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module phy.
Optimizing module phy_rx.
Optimizing module phy_tx.
Optimizing module mux_unstriping.
<suppressed ~10 debug messages>
Optimizing module Mux8_32.
<suppressed ~4 debug messages>
Optimizing module Serial_Paralelo.
<suppressed ~4 debug messages>
Optimizing module demux_striping.
<suppressed ~18 debug messages>
Optimizing module module_PS.
<suppressed ~4 debug messages>
Optimizing module module_Recirculacion.
<suppressed ~1 debug messages>
Optimizing module module_Flops.
<suppressed ~2 debug messages>
Optimizing module Demux32_8.
<suppressed ~8 debug messages>

14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\phy'.
Finding identical cells in module `\phy_rx'.
Finding identical cells in module `\phy_tx'.
Finding identical cells in module `\mux_unstriping'.
<suppressed ~6 debug messages>
Finding identical cells in module `\Mux8_32'.
Finding identical cells in module `\Serial_Paralelo'.
<suppressed ~3 debug messages>
Finding identical cells in module `\demux_striping'.
<suppressed ~15 debug messages>
Finding identical cells in module `\module_PS'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\Demux32_8'.
<suppressed ~6 debug messages>
Removed a total of 11 cells.

14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \phy..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \phy_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \phy_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux_unstriping..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$95: \selectorInterno -> 1'1
      Replacing known input bits on port A of cell $procmux$98: \selectorInterno -> 1'0
  Analyzing evaluation results.
Running muxtree optimizer on module \Mux8_32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Serial_Paralelo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $procmux$171: \active -> 1'1
      Replacing known input bits on port A of cell $procmux$168: \active -> 1'0
  Analyzing evaluation results.
Running muxtree optimizer on module \demux_striping..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $procmux$228: \valid_in -> 1'1
      Replacing known input bits on port B of cell $procmux$218: \valid_in -> 1'1
      Replacing known input bits on port A of cell $procmux$202: \selectorInterno -> 1'1
      Replacing known input bits on port A of cell $procmux$208: \selectorInterno -> 1'0
  Analyzing evaluation results.
Running muxtree optimizer on module \module_PS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_Recirculacion..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_Flops..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Demux32_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$405.
Removed 1 multiplexer ports.
<suppressed ~45 debug messages>

14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \phy.
  Optimizing cells in module \phy_rx.
  Optimizing cells in module \phy_tx.
  Optimizing cells in module \mux_unstriping.
  Optimizing cells in module \Mux8_32.
  Optimizing cells in module \Serial_Paralelo.
  Optimizing cells in module \demux_striping.
  Optimizing cells in module \module_PS.
  Optimizing cells in module \module_Recirculacion.
  Optimizing cells in module \module_Flops.
  Optimizing cells in module \Demux32_8.
Performed a total of 0 changes.

14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\phy'.
Finding identical cells in module `\phy_rx'.
Finding identical cells in module `\phy_tx'.
Finding identical cells in module `\mux_unstriping'.
Finding identical cells in module `\Mux8_32'.
Finding identical cells in module `\Serial_Paralelo'.
Finding identical cells in module `\demux_striping'.
<suppressed ~6 debug messages>
Finding identical cells in module `\module_PS'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\Demux32_8'.
Removed a total of 3 cells.

14.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$419 ($dff) from module mux_unstriping (D = $procmux$100_Y, Q = \selectorInterno, rval = 1'0).
Adding SRST signal on $procdff$417 ($dff) from module mux_unstriping (D = $procmux$90_Y, Q = \data_out, rval = 0).
Adding SRST signal on $procdff$418 ($dff) from module mux_unstriping (D = $procmux$84_Y, Q = \valid_out, rval = 1'0).
Adding SRST signal on $procdff$422 ($dff) from module Mux8_32 (D = { \mem [23:0] \data_in }, Q = \mem, rval = 0).
Adding SRST signal on $procdff$420 ($dff) from module Mux8_32 (D = \mem, Q = \data_out, rval = 0).
Adding SRST signal on $procdff$432 ($dff) from module Serial_Paralelo (D = { \buffer [6:0] \data_in }, Q = \buffer, rval = 8'00000000).
Adding SRST signal on $procdff$431 ($dff) from module Serial_Paralelo (D = $procmux$137_Y, Q = \valid_out_pre1, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$452 ($sdff) from module Serial_Paralelo (D = $procmux$133_Y, Q = \valid_out_pre1).
Adding SRST signal on $procdff$430 ($dff) from module Serial_Paralelo (D = $procmux$149_Y, Q = \data_out_pre1, rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$456 ($sdff) from module Serial_Paralelo (D = $procmux$145_Y, Q = \data_out_pre1).
Adding SRST signal on $procdff$429 ($dff) from module Serial_Paralelo (D = $procmux$125_Y [0], Q = \counter_out [0], rval = 1'0).
Adding SRST signal on $procdff$429 ($dff) from module Serial_Paralelo (D = $add$Serial_Paralelo.v:74$60_Y [3:1], Q = \counter_out [3:1], rval = 3'000).
Adding SRST signal on $procdff$427 ($dff) from module Serial_Paralelo (D = $procmux$173_Y, Q = \active, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$466 ($sdff) from module Serial_Paralelo (D = $procmux$171_Y, Q = \active).
Adding SRST signal on $procdff$428 ($dff) from module Serial_Paralelo (D = $procmux$162_Y, Q = \contador_BC, rval = 3'000).
Adding EN signal on $auto$opt_dff.cc:702:run$468 ($sdff) from module Serial_Paralelo (D = $procmux$160_Y, Q = \contador_BC).
Adding SRST signal on $procdff$437 ($dff) from module demux_striping (D = $procmux$212_Y, Q = \selectorInterno, rval = 1'0).
Adding SRST signal on $procdff$436 ($dff) from module demux_striping (D = $procmux$221_Y, Q = \valid_out_1, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$475 ($sdff) from module demux_striping (D = $procmux$218_Y, Q = \valid_out_1).
Adding SRST signal on $procdff$435 ($dff) from module demux_striping (D = $procmux$230_Y, Q = \valid_out_0, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$477 ($sdff) from module demux_striping (D = $procmux$228_Y, Q = \valid_out_0).
Adding SRST signal on $procdff$433 ($dff) from module demux_striping (D = $procmux$248_Y, Q = \data_out0, rval = 0).
Adding EN signal on $auto$opt_dff.cc:702:run$479 ($sdff) from module demux_striping (D = $procmux$246_Y, Q = \data_out0).
Adding SRST signal on $procdff$434 ($dff) from module demux_striping (D = $procmux$239_Y, Q = \data_out1, rval = 0).
Adding EN signal on $auto$opt_dff.cc:702:run$481 ($sdff) from module demux_striping (D = $procmux$236_Y, Q = \data_out1).
Adding SRST signal on $procdff$440 ($dff) from module module_PS (D = { $procmux$261_Y $procmux$345_Y $procmux$273_Y $procmux$285_Y $procmux$297_Y $procmux$309_Y $procmux$321_Y }, Q = \data_in1_PS [7:1], rval = 7'0000000).
Adding SRST signal on $procdff$440 ($dff) from module module_PS (D = $procmux$331_Y, Q = \data_in1_PS [0], rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$486 ($sdff) from module module_PS (D = $procmux$329_Y, Q = \data_in1_PS [0]).
Adding EN signal on $auto$opt_dff.cc:702:run$483 ($sdff) from module module_PS (D = { $procmux$261_Y $procmux$345_Y $procmux$273_Y $procmux$285_Y $procmux$297_Y $procmux$309_Y $procmux$321_Y }, Q = \data_in1_PS [7:1]).
Adding SRST signal on $procdff$439 ($dff) from module module_PS (D = $procmux$366_Y, Q = \data_out_PS, rval = 1'0).
Adding SRST signal on $procdff$438 ($dff) from module module_PS (D = $procmux$354_Y, Q = \counter, rval = 3'000).
Adding SRST signal on $procdff$442 ($dff) from module module_Flops (D = \valid_in, Q = \valid_out_Flops, rval = 1'0).
Adding SRST signal on $procdff$441 ($dff) from module module_Flops (D = \data_in, Q = \data_out_Flops, rval = 0).
Adding SRST signal on $procdff$445 ($dff) from module Demux32_8 (D = $procmux$407_Y [0], Q = \counter [0], rval = 1'0).
Adding SRST signal on $procdff$445 ($dff) from module Demux32_8 (D = $procmux$405_Y [2:1], Q = \counter [2:1], rval = 2'00).
Adding SRST signal on $procdff$444 ($dff) from module Demux32_8 (D = $procmux$391_Y, Q = \valid_out, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$501 ($sdff) from module Demux32_8 (D = $procmux$391_Y, Q = \valid_out).
Adding SRST signal on $procdff$443 ($dff) from module Demux32_8 (D = $procmux$401_Y, Q = \data_out, rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$505 ($sdff) from module Demux32_8 (D = $procmux$401_Y, Q = \data_out).

14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \phy..
Finding unused cells or wires in module \phy_rx..
Finding unused cells or wires in module \phy_tx..
Finding unused cells or wires in module \mux_unstriping..
Finding unused cells or wires in module \Mux8_32..
Finding unused cells or wires in module \Serial_Paralelo..
Finding unused cells or wires in module \demux_striping..
Finding unused cells or wires in module \module_PS..
Finding unused cells or wires in module \module_Recirculacion..
Finding unused cells or wires in module \module_Flops..
Finding unused cells or wires in module \Demux32_8..
Removed 59 unused cells and 275 unused wires.
<suppressed ~75 debug messages>

14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Demux32_8.
<suppressed ~2 debug messages>
Optimizing module Mux8_32.
Optimizing module Serial_Paralelo.
<suppressed ~1 debug messages>
Optimizing module demux_striping.
Optimizing module module_Flops.
Optimizing module module_PS.
Optimizing module module_Recirculacion.
Optimizing module mux_unstriping.
Optimizing module phy.
Optimizing module phy_rx.
Optimizing module phy_tx.

14.9. Rerunning OPT passes. (Maybe there is more to do..)

14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Demux32_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Mux8_32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Serial_Paralelo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \demux_striping..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_Flops..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \module_PS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_Recirculacion..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux_unstriping..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \phy..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \phy_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \phy_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Demux32_8.
  Optimizing cells in module \Mux8_32.
  Optimizing cells in module \Serial_Paralelo.
  Optimizing cells in module \demux_striping.
  Optimizing cells in module \module_Flops.
  Optimizing cells in module \module_PS.
  Optimizing cells in module \module_Recirculacion.
  Optimizing cells in module \mux_unstriping.
  Optimizing cells in module \phy.
  Optimizing cells in module \phy_rx.
  Optimizing cells in module \phy_tx.
Performed a total of 0 changes.

14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Demux32_8'.
<suppressed ~3 debug messages>
Finding identical cells in module `\Mux8_32'.
Finding identical cells in module `\Serial_Paralelo'.
<suppressed ~3 debug messages>
Finding identical cells in module `\demux_striping'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\module_PS'.
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\mux_unstriping'.
Finding identical cells in module `\phy'.
Finding identical cells in module `\phy_rx'.
Finding identical cells in module `\phy_tx'.
Removed a total of 2 cells.

14.13. Executing OPT_DFF pass (perform DFF optimizations).

14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Demux32_8..
Finding unused cells or wires in module \Mux8_32..
Finding unused cells or wires in module \Serial_Paralelo..
Finding unused cells or wires in module \demux_striping..
Finding unused cells or wires in module \module_Flops..
Finding unused cells or wires in module \module_PS..
Finding unused cells or wires in module \module_Recirculacion..
Finding unused cells or wires in module \mux_unstriping..
Finding unused cells or wires in module \phy..
Finding unused cells or wires in module \phy_rx..
Finding unused cells or wires in module \phy_tx..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Demux32_8.
Optimizing module Mux8_32.
Optimizing module Serial_Paralelo.
Optimizing module demux_striping.
Optimizing module module_Flops.
Optimizing module module_PS.
Optimizing module module_Recirculacion.
Optimizing module mux_unstriping.
Optimizing module phy.
Optimizing module phy_rx.
Optimizing module phy_tx.

14.16. Rerunning OPT passes. (Maybe there is more to do..)

14.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Demux32_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Mux8_32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Serial_Paralelo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \demux_striping..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_Flops..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \module_PS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_Recirculacion..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux_unstriping..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \phy..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \phy_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \phy_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

14.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Demux32_8.
  Optimizing cells in module \Mux8_32.
  Optimizing cells in module \Serial_Paralelo.
  Optimizing cells in module \demux_striping.
  Optimizing cells in module \module_Flops.
  Optimizing cells in module \module_PS.
  Optimizing cells in module \module_Recirculacion.
  Optimizing cells in module \mux_unstriping.
  Optimizing cells in module \phy.
  Optimizing cells in module \phy_rx.
  Optimizing cells in module \phy_tx.
Performed a total of 0 changes.

14.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Demux32_8'.
Finding identical cells in module `\Mux8_32'.
Finding identical cells in module `\Serial_Paralelo'.
Finding identical cells in module `\demux_striping'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\module_PS'.
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\mux_unstriping'.
Finding identical cells in module `\phy'.
Finding identical cells in module `\phy_rx'.
Finding identical cells in module `\phy_tx'.
Removed a total of 0 cells.

14.20. Executing OPT_DFF pass (perform DFF optimizations).

14.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Demux32_8..
Finding unused cells or wires in module \Mux8_32..
Finding unused cells or wires in module \Serial_Paralelo..
Finding unused cells or wires in module \demux_striping..
Finding unused cells or wires in module \module_Flops..
Finding unused cells or wires in module \module_PS..
Finding unused cells or wires in module \module_Recirculacion..
Finding unused cells or wires in module \mux_unstriping..
Finding unused cells or wires in module \phy..
Finding unused cells or wires in module \phy_rx..
Finding unused cells or wires in module \phy_tx..

14.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module Demux32_8.
Optimizing module Mux8_32.
Optimizing module Serial_Paralelo.
Optimizing module demux_striping.
Optimizing module module_Flops.
Optimizing module module_PS.
Optimizing module module_Recirculacion.
Optimizing module mux_unstriping.
Optimizing module phy.
Optimizing module phy_rx.
Optimizing module phy_tx.

14.23. Finished OPT passes. (There is nothing left to do.)

15. Executing FSM pass (extract and optimize FSM).

15.1. Executing FSM_DETECT pass (finding FSMs in design).

15.2. Executing FSM_EXTRACT pass (extracting FSM from design).

15.3. Executing FSM_OPT pass (simple optimizations of FSMs).

15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Demux32_8..
Finding unused cells or wires in module \Mux8_32..
Finding unused cells or wires in module \Serial_Paralelo..
Finding unused cells or wires in module \demux_striping..
Finding unused cells or wires in module \module_Flops..
Finding unused cells or wires in module \module_PS..
Finding unused cells or wires in module \module_Recirculacion..
Finding unused cells or wires in module \mux_unstriping..
Finding unused cells or wires in module \phy..
Finding unused cells or wires in module \phy_rx..
Finding unused cells or wires in module \phy_tx..

15.5. Executing FSM_OPT pass (simple optimizations of FSMs).

15.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

15.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

15.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

16. Executing OPT pass (performing simple optimizations).

16.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Demux32_8.
Optimizing module Mux8_32.
Optimizing module Serial_Paralelo.
Optimizing module demux_striping.
Optimizing module module_Flops.
Optimizing module module_PS.
Optimizing module module_Recirculacion.
Optimizing module mux_unstriping.
Optimizing module phy.
Optimizing module phy_rx.
Optimizing module phy_tx.

16.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Demux32_8'.
Finding identical cells in module `\Mux8_32'.
Finding identical cells in module `\Serial_Paralelo'.
Finding identical cells in module `\demux_striping'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\module_PS'.
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\mux_unstriping'.
Finding identical cells in module `\phy'.
Finding identical cells in module `\phy_rx'.
Finding identical cells in module `\phy_tx'.
Removed a total of 0 cells.

16.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Demux32_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Mux8_32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Serial_Paralelo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \demux_striping..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_Flops..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \module_PS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_Recirculacion..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux_unstriping..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \phy..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \phy_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \phy_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

16.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Demux32_8.
  Optimizing cells in module \Mux8_32.
  Optimizing cells in module \Serial_Paralelo.
  Optimizing cells in module \demux_striping.
  Optimizing cells in module \module_Flops.
  Optimizing cells in module \module_PS.
  Optimizing cells in module \module_Recirculacion.
  Optimizing cells in module \mux_unstriping.
  Optimizing cells in module \phy.
  Optimizing cells in module \phy_rx.
  Optimizing cells in module \phy_tx.
Performed a total of 0 changes.

16.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Demux32_8'.
Finding identical cells in module `\Mux8_32'.
Finding identical cells in module `\Serial_Paralelo'.
Finding identical cells in module `\demux_striping'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\module_PS'.
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\mux_unstriping'.
Finding identical cells in module `\phy'.
Finding identical cells in module `\phy_rx'.
Finding identical cells in module `\phy_tx'.
Removed a total of 0 cells.

16.6. Executing OPT_DFF pass (perform DFF optimizations).

16.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Demux32_8..
Finding unused cells or wires in module \Mux8_32..
Finding unused cells or wires in module \Serial_Paralelo..
Finding unused cells or wires in module \demux_striping..
Finding unused cells or wires in module \module_Flops..
Finding unused cells or wires in module \module_PS..
Finding unused cells or wires in module \module_Recirculacion..
Finding unused cells or wires in module \mux_unstriping..
Finding unused cells or wires in module \phy..
Finding unused cells or wires in module \phy_rx..
Finding unused cells or wires in module \phy_tx..

16.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Demux32_8.
Optimizing module Mux8_32.
Optimizing module Serial_Paralelo.
Optimizing module demux_striping.
Optimizing module module_Flops.
Optimizing module module_PS.
Optimizing module module_Recirculacion.
Optimizing module mux_unstriping.
Optimizing module phy.
Optimizing module phy_rx.
Optimizing module phy_tx.

16.9. Finished OPT passes. (There is nothing left to do.)

17. Executing MEMORY pass.

17.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

17.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

17.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Demux32_8..
Finding unused cells or wires in module \Mux8_32..
Finding unused cells or wires in module \Serial_Paralelo..
Finding unused cells or wires in module \demux_striping..
Finding unused cells or wires in module \module_Flops..
Finding unused cells or wires in module \module_PS..
Finding unused cells or wires in module \module_Recirculacion..
Finding unused cells or wires in module \mux_unstriping..
Finding unused cells or wires in module \phy..
Finding unused cells or wires in module \phy_rx..
Finding unused cells or wires in module \phy_tx..

17.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

17.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Demux32_8..
Finding unused cells or wires in module \Mux8_32..
Finding unused cells or wires in module \Serial_Paralelo..
Finding unused cells or wires in module \demux_striping..
Finding unused cells or wires in module \module_Flops..
Finding unused cells or wires in module \module_PS..
Finding unused cells or wires in module \module_Recirculacion..
Finding unused cells or wires in module \mux_unstriping..
Finding unused cells or wires in module \phy..
Finding unused cells or wires in module \phy_rx..
Finding unused cells or wires in module \phy_tx..

17.6. Executing MEMORY_COLLECT pass (generating $mem cells).

17.7. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

18. Executing OPT pass (performing simple optimizations).

18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Demux32_8.
Optimizing module Mux8_32.
Optimizing module Serial_Paralelo.
Optimizing module demux_striping.
Optimizing module module_Flops.
Optimizing module module_PS.
Optimizing module module_Recirculacion.
Optimizing module mux_unstriping.
Optimizing module phy.
Optimizing module phy_rx.
Optimizing module phy_tx.

18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Demux32_8'.
Finding identical cells in module `\Mux8_32'.
Finding identical cells in module `\Serial_Paralelo'.
Finding identical cells in module `\demux_striping'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\module_PS'.
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\mux_unstriping'.
Finding identical cells in module `\phy'.
Finding identical cells in module `\phy_rx'.
Finding identical cells in module `\phy_tx'.
Removed a total of 0 cells.

18.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Demux32_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Mux8_32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Serial_Paralelo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \demux_striping..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_Flops..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \module_PS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module_Recirculacion..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux_unstriping..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \phy..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \phy_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \phy_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

18.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Demux32_8.
  Optimizing cells in module \Mux8_32.
  Optimizing cells in module \Serial_Paralelo.
  Optimizing cells in module \demux_striping.
  Optimizing cells in module \module_Flops.
  Optimizing cells in module \module_PS.
  Optimizing cells in module \module_Recirculacion.
  Optimizing cells in module \mux_unstriping.
  Optimizing cells in module \phy.
  Optimizing cells in module \phy_rx.
  Optimizing cells in module \phy_tx.
Performed a total of 0 changes.

18.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Demux32_8'.
Finding identical cells in module `\Mux8_32'.
Finding identical cells in module `\Serial_Paralelo'.
Finding identical cells in module `\demux_striping'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\module_PS'.
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\mux_unstriping'.
Finding identical cells in module `\phy'.
Finding identical cells in module `\phy_rx'.
Finding identical cells in module `\phy_tx'.
Removed a total of 0 cells.

18.6. Executing OPT_DFF pass (perform DFF optimizations).

18.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Demux32_8..
Finding unused cells or wires in module \Mux8_32..
Finding unused cells or wires in module \Serial_Paralelo..
Finding unused cells or wires in module \demux_striping..
Finding unused cells or wires in module \module_Flops..
Finding unused cells or wires in module \module_PS..
Finding unused cells or wires in module \module_Recirculacion..
Finding unused cells or wires in module \mux_unstriping..
Finding unused cells or wires in module \phy..
Finding unused cells or wires in module \phy_rx..
Finding unused cells or wires in module \phy_tx..

18.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Demux32_8.
Optimizing module Mux8_32.
Optimizing module Serial_Paralelo.
Optimizing module demux_striping.
Optimizing module module_Flops.
Optimizing module module_PS.
Optimizing module module_Recirculacion.
Optimizing module mux_unstriping.
Optimizing module phy.
Optimizing module phy_rx.
Optimizing module phy_tx.

18.9. Finished OPT passes. (There is nothing left to do.)

19. Executing TECHMAP pass (map to technology primitives).

19.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

19.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_or.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_bool.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
No more expansions possible.
<suppressed ~1026 debug messages>

20. Executing OPT pass (performing simple optimizations).

20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Demux32_8.
<suppressed ~347 debug messages>
Optimizing module Mux8_32.
<suppressed ~1 debug messages>
Optimizing module Serial_Paralelo.
<suppressed ~632 debug messages>
Optimizing module demux_striping.
<suppressed ~1 debug messages>
Optimizing module module_Flops.
Optimizing module module_PS.
<suppressed ~316 debug messages>
Optimizing module module_Recirculacion.
Optimizing module mux_unstriping.
Optimizing module phy.
Optimizing module phy_rx.
Optimizing module phy_tx.

20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Demux32_8'.
<suppressed ~9 debug messages>
Finding identical cells in module `\Mux8_32'.
Finding identical cells in module `\Serial_Paralelo'.
<suppressed ~9 debug messages>
Finding identical cells in module `\demux_striping'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\module_PS'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\mux_unstriping'.
Finding identical cells in module `\phy'.
Finding identical cells in module `\phy_rx'.
Finding identical cells in module `\phy_tx'.
Removed a total of 7 cells.

20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Demux32_8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Mux8_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Serial_Paralelo..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \demux_striping..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \module_Flops..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \module_PS..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \module_Recirculacion..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux_unstriping..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \phy..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \phy_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \phy_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Demux32_8.
  Optimizing cells in module \Mux8_32.
  Optimizing cells in module \Serial_Paralelo.
  Optimizing cells in module \demux_striping.
  Optimizing cells in module \module_Flops.
  Optimizing cells in module \module_PS.
  Optimizing cells in module \module_Recirculacion.
  Optimizing cells in module \mux_unstriping.
  Optimizing cells in module \phy.
  Optimizing cells in module \phy_rx.
  Optimizing cells in module \phy_tx.
Performed a total of 0 changes.

20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Demux32_8'.
Finding identical cells in module `\Mux8_32'.
Finding identical cells in module `\Serial_Paralelo'.
Finding identical cells in module `\demux_striping'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\module_PS'.
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\mux_unstriping'.
Finding identical cells in module `\phy'.
Finding identical cells in module `\phy_rx'.
Finding identical cells in module `\phy_tx'.
Removed a total of 0 cells.

20.6. Executing OPT_DFF pass (perform DFF optimizations).

20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Demux32_8..
Finding unused cells or wires in module \Mux8_32..
Finding unused cells or wires in module \Serial_Paralelo..
Finding unused cells or wires in module \demux_striping..
Finding unused cells or wires in module \module_Flops..
Finding unused cells or wires in module \module_PS..
Finding unused cells or wires in module \module_Recirculacion..
Finding unused cells or wires in module \mux_unstriping..
Finding unused cells or wires in module \phy..
Finding unused cells or wires in module \phy_rx..
Finding unused cells or wires in module \phy_tx..
Removed 13 unused cells and 592 unused wires.
<suppressed ~18 debug messages>

20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Demux32_8.
Optimizing module Mux8_32.
Optimizing module Serial_Paralelo.
Optimizing module demux_striping.
Optimizing module module_Flops.
Optimizing module module_PS.
Optimizing module module_Recirculacion.
Optimizing module mux_unstriping.
Optimizing module phy.
Optimizing module phy_rx.
Optimizing module phy_tx.

20.9. Rerunning OPT passes. (Maybe there is more to do..)

20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Demux32_8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Mux8_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Serial_Paralelo..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \demux_striping..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \module_Flops..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \module_PS..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \module_Recirculacion..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux_unstriping..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \phy..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \phy_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \phy_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Demux32_8.
  Optimizing cells in module \Mux8_32.
  Optimizing cells in module \Serial_Paralelo.
  Optimizing cells in module \demux_striping.
  Optimizing cells in module \module_Flops.
  Optimizing cells in module \module_PS.
  Optimizing cells in module \module_Recirculacion.
  Optimizing cells in module \mux_unstriping.
  Optimizing cells in module \phy.
  Optimizing cells in module \phy_rx.
  Optimizing cells in module \phy_tx.
Performed a total of 0 changes.

20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Demux32_8'.
Finding identical cells in module `\Mux8_32'.
Finding identical cells in module `\Serial_Paralelo'.
Finding identical cells in module `\demux_striping'.
Finding identical cells in module `\module_Flops'.
Finding identical cells in module `\module_PS'.
Finding identical cells in module `\module_Recirculacion'.
Finding identical cells in module `\mux_unstriping'.
Finding identical cells in module `\phy'.
Finding identical cells in module `\phy_rx'.
Finding identical cells in module `\phy_tx'.
Removed a total of 0 cells.

20.13. Executing OPT_DFF pass (perform DFF optimizations).

20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Demux32_8..
Finding unused cells or wires in module \Mux8_32..
Finding unused cells or wires in module \Serial_Paralelo..
Finding unused cells or wires in module \demux_striping..
Finding unused cells or wires in module \module_Flops..
Finding unused cells or wires in module \module_PS..
Finding unused cells or wires in module \module_Recirculacion..
Finding unused cells or wires in module \mux_unstriping..
Finding unused cells or wires in module \phy..
Finding unused cells or wires in module \phy_rx..
Finding unused cells or wires in module \phy_tx..

20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Demux32_8.
Optimizing module Mux8_32.
Optimizing module Serial_Paralelo.
Optimizing module demux_striping.
Optimizing module module_Flops.
Optimizing module module_PS.
Optimizing module module_Recirculacion.
Optimizing module mux_unstriping.
Optimizing module phy.
Optimizing module phy_rx.
Optimizing module phy_tx.

20.16. Finished OPT passes. (There is nothing left to do.)

21. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF (noninv, pins=3, area=18.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=18.00) is a direct match for cell type $_DFFSR_PPP_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \DFF _DFF_P_ (.C( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    \DFFSR _DFFSR_PPP_ (.C( C), .D( D), .Q( Q), .R( R), .S( S));

21.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\Demux32_8':
  mapped 12 $_DFF_P_ cells to \DFF cells.
Mapping DFF cells in module `\Mux8_32':
  mapped 65 $_DFF_P_ cells to \DFF cells.
Mapping DFF cells in module `\Serial_Paralelo':
  mapped 43 $_DFF_P_ cells to \DFF cells.
Mapping DFF cells in module `\demux_striping':
  mapped 67 $_DFF_P_ cells to \DFF cells.
Mapping DFF cells in module `\module_Flops':
  mapped 33 $_DFF_P_ cells to \DFF cells.
Mapping DFF cells in module `\module_PS':
  mapped 11 $_DFF_P_ cells to \DFF cells.
Mapping DFF cells in module `\module_Recirculacion':
Mapping DFF cells in module `\mux_unstriping':
  mapped 34 $_DFF_P_ cells to \DFF cells.
Mapping DFF cells in module `\phy':
Mapping DFF cells in module `\phy_rx':
  mapped 51 $_DFF_P_ cells to \DFF cells.
Mapping DFF cells in module `\phy_tx':

22. Executing ABC pass (technology mapping using ABC).

22.1. Extracting gate netlist of module `\Demux32_8' to `<abc-temp-dir>/input.blif'..
Extracted 85 gates and 134 wires to a netlist network with 46 inputs and 15 outputs.

22.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       18
ABC RESULTS:               NOR cells:       81
ABC RESULTS:               NOT cells:       49
ABC RESULTS:        internal signals:       73
ABC RESULTS:           input signals:       46
ABC RESULTS:          output signals:       15
Removing temp directory.

22.2. Extracting gate netlist of module `\Mux8_32' to `<abc-temp-dir>/input.blif'..
Extracted 97 gates and 141 wires to a netlist network with 43 inputs and 97 outputs.

22.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.2.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       33
ABC RESULTS:               NOR cells:       32
ABC RESULTS:               NOT cells:       97
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:       43
ABC RESULTS:          output signals:       97
Removing temp directory.

22.3. Extracting gate netlist of module `\Serial_Paralelo' to `<abc-temp-dir>/input.blif'..
Extracted 101 gates and 132 wires to a netlist network with 28 inputs and 33 outputs.

22.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.3.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       48
ABC RESULTS:               NOR cells:       46
ABC RESULTS:               NOT cells:       29
ABC RESULTS:        internal signals:       71
ABC RESULTS:           input signals:       28
ABC RESULTS:          output signals:       33
Removing temp directory.

22.4. Extracting gate netlist of module `\demux_striping' to `<abc-temp-dir>/input.blif'..
Extracted 174 gates and 277 wires to a netlist network with 101 inputs and 67 outputs.

22.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.4.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:      166
ABC RESULTS:               NOR cells:      135
ABC RESULTS:               NOT cells:        3
ABC RESULTS:        internal signals:      109
ABC RESULTS:           input signals:      101
ABC RESULTS:          output signals:       67
Removing temp directory.

22.5. Extracting gate netlist of module `\module_Flops' to `<abc-temp-dir>/input.blif'..
Extracted 33 gates and 68 wires to a netlist network with 34 inputs and 33 outputs.

22.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.5.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       33
ABC RESULTS:               NOT cells:       33
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:       33
Removing temp directory.

22.6. Extracting gate netlist of module `\module_PS' to `<abc-temp-dir>/input.blif'..
Extracted 68 gates and 91 wires to a netlist network with 20 inputs and 11 outputs.

22.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.6.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       11
ABC RESULTS:               NOR cells:       44
ABC RESULTS:               NOT cells:       10
ABC RESULTS:        internal signals:       60
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:       11
Removing temp directory.

22.7. Extracting gate netlist of module `\module_Recirculacion' to `<abc-temp-dir>/input.blif'..
Extracted 65 gates and 100 wires to a netlist network with 34 inputs and 65 outputs.

22.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.7.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       33
ABC RESULTS:               NOR cells:       32
ABC RESULTS:               NOT cells:       65
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:       65
Removing temp directory.

22.8. Extracting gate netlist of module `\mux_unstriping' to `<abc-temp-dir>/input.blif'..
Extracted 71 gates and 141 wires to a netlist network with 68 inputs and 34 outputs.

22.8.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.8.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       66
ABC RESULTS:               NOR cells:       68
ABC RESULTS:               NOT cells:       35
ABC RESULTS:        internal signals:       39
ABC RESULTS:           input signals:       68
ABC RESULTS:          output signals:       34
Removing temp directory.

22.9. Extracting gate netlist of module `\phy' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22.10. Extracting gate netlist of module `\phy_rx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22.11. Extracting gate netlist of module `\phy_tx' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

22.11.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/erick/Escritorio/Proyectos_Digitales_II/Proyecto_1/src/phy/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.11.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.
Removed 0 unused cells and 951 unused wires.

23. Executing Verilog backend.
Dumping module `\Demux32_8'.
Dumping module `\Mux8_32'.
Dumping module `\Serial_Paralelo'.
Dumping module `\demux_striping'.
Dumping module `\module_Flops'.
Dumping module `\module_PS'.
Dumping module `\module_Recirculacion'.
Dumping module `\mux_unstriping'.
Dumping module `\phy'.
Dumping module `\phy_rx'.
Dumping module `\phy_tx'.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 97e0188a11, CPU: user 0.79s system 0.01s, MEM: 19.62 MB peak
Yosys 0.9+3565 (git sha1 474cd02e, gcc 9.3.0-10ubuntu2 -fPIC -Os)
Time spent: 49% 1x abc (0 sec), 18% 2x write_verilog (0 sec), ...
